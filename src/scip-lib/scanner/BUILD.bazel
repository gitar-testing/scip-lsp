load("@bazel_gomock//rules:gomock.bzl", "gomock")
load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "go_default_library",
    srcs = [
        "bufferpool.go",
        "scan.go",
    ],
    importpath = "github.com/uber/scip-lsp/src/scip-lib/scanner",
    visibility = ["//visibility:public"],
    deps = [
        "@com_github_sourcegraph_scip//bindings/go/scip:go_default_library",
        "@org_golang_google_protobuf//encoding/protowire:go_default_library",
        "@org_golang_google_protobuf//proto:go_default_library",
    ],
)

gomock(
    name = "scan_mock",
    out = "scan_mock_for_test.go",
    interfaces = [
        "IndexScanner",
        "ScipReader",
    ],
    library = ":go_default_library",
    mockgen_tool = "@org_uber_go_mock//mockgen",
    package = "scanner",
    self_package = "github.com/uber/scip-lsp/src/scip-lib/scanner",
    source = "scan.go",
)

gomock(
    name = "bufferpool_mock",
    out = "bufferpool_mock_for_test.go",
    interfaces = [
        "SyncPool",
    ],
    library = ":go_default_library",
    mockgen_tool = "@org_uber_go_mock//mockgen",
    package = "scanner",
    self_package = "github.com/uber/scip-lsp/src/scip-lib/scanner",
    source = "bufferpool.go",
)

go_test(
    name = "go_default_test",
    srcs = [
        "bufferpool_test.go",
        "document_test.go",
        "scan_test.go",
        "scan_util_test.go",
        ":bufferpool_mock",  #keep
        ":scan_mock",  #keep
    ],
    data = glob(["testdata/**"]),
    embed = [":go_default_library"],
    deps = [
        "@com_github_sourcegraph_scip//bindings/go/scip:go_default_library",
        "@com_github_stretchr_testify//assert:go_default_library",
        "@com_github_stretchr_testify//require:go_default_library",
        "@org_golang_google_protobuf//encoding/protowire:go_default_library",
        "@org_golang_google_protobuf//proto:go_default_library",
        "@org_uber_go_mock//gomock:go_default_library",
    ],
)
